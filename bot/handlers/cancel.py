"""
Handler pour l'annulation des op√©rations
"""

from telegram import Update, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

from ..logger import setup_logger

logger = setup_logger(__name__)


async def handle_cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re la commande d'annulation"""
    try:
        # Nettoyer le contexte utilisateur
        context.user_data.clear()
        
        # Supprimer le clavier personnalis√© si pr√©sent
        await update.message.reply_text(
            "‚ùå <b>Op√©ration annul√©e</b>\n\n"
            "Toutes les op√©rations en cours ont √©t√© annul√©es.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
        
        # Si on est dans une conversation, la terminer
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Erreur cancel: {e}")
        await update.message.reply_text("‚ùå Erreur lors de l'annulation")


async def handle_cancel_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """G√®re le callback d'annulation"""
    query = update.callback_query
    await query.answer()
    
    try:
        # Nettoyer le contexte
        context.user_data.clear()
        
        # √âditer le message
        await query.edit_message_text(
            "‚ùå <b>Op√©ration annul√©e</b>",
            parse_mode="HTML"
        )
        
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"Erreur cancel callback: {e}")
        await query.answer("‚ùå Erreur", show_alert=True)


async def handle_cancel_send(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Annule un envoi en cours"""
    query = update.callback_query
    await query.answer()
    
    try:
        # Nettoyer les donn√©es d'envoi
        context.user_data.pop('sending_post_id', None)
        context.user_data.pop('selected_channels', None)
        
        await query.edit_message_text(
            "‚ùå <b>Envoi annul√©</b>\n\n"
            "Le post n'a pas √©t√© envoy√©.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Erreur cancel send: {e}")
        await query.edit_message_text("‚ùå Erreur")


async def handle_cancel_edit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Annule une √©dition en cours"""
    query = update.callback_query
    await query.answer()
    
    try:
        # Nettoyer les donn√©es d'√©dition
        context.user_data.pop('editing_post_id', None)
        context.user_data.pop('edit_field', None)
        
        await query.edit_message_text(
            "‚ùå <b>√âdition annul√©e</b>\n\n"
            "Les modifications n'ont pas √©t√© enregistr√©es.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Erreur cancel edit: {e}")
        await query.edit_message_text("‚ùå Erreur")


async def handle_cancel_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """Annule une planification"""
    query = update.callback_query
    await query.answer()
    
    try:
        # Nettoyer les donn√©es de planification
        context.user_data.pop('scheduling_post_id', None)
        context.user_data.pop('schedule_time', None)
        
        await query.edit_message_text(
            "‚ùå <b>Planification annul√©e</b>\n\n"
            "Le post n'a pas √©t√© planifi√©.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Erreur cancel schedule: {e}")
        await query.edit_message_text("‚ùå Erreur")


async def reset_user_state(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """R√©initialise compl√®tement l'√©tat de l'utilisateur"""
    try:
        user_id = update.effective_user.id
        
        # Nettoyer toutes les donn√©es
        context.user_data.clear()
        context.chat_data.clear()
        
        # Annuler les jobs en cours pour cet utilisateur
        current_jobs = context.job_queue.get_jobs_by_name(str(user_id))
        for job in current_jobs:
            job.schedule_removal()
        
        logger.info(f"√âtat r√©initialis√© pour l'utilisateur {user_id}")
        
        await update.message.reply_text(
            "üîÑ <b>√âtat r√©initialis√©</b>\n\n"
            "Votre session a √©t√© compl√®tement r√©initialis√©e.\n"
            "Utilisez /start pour recommencer.",
            parse_mode="HTML",
            reply_markup=ReplyKeyboardRemove()
        )
        
    except Exception as e:
        logger.error(f"Erreur reset: {e}")
        await update.message.reply_text("‚ùå Erreur lors de la r√©initialisation")


